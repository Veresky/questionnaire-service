package com.xiaohudu.questionnaire.interceptor;import com.alibaba.fastjson2.JSON;import com.alibaba.fastjson2.JSONArray;import com.alibaba.fastjson2.JSONObject;import com.xiaohudu.questionnaire.constant.Constant;import com.xiaohudu.questionnaire.constant.ResultCode;import com.xiaohudu.questionnaire.utils.Result;import com.xiaohudu.questionnaire.utils.ServletContextUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.redis.core.StringRedisTemplate;import org.springframework.web.servlet.HandlerInterceptor;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.List;import java.util.concurrent.TimeUnit;public class LoginInterceptor implements HandlerInterceptor {  @Autowired  private StringRedisTemplate stringRedisTemplate;  @Override  public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {    String token = request.getHeader("token");    if (StringUtils.isBlank(token)) {      return tokenError(response, "token不能为空");    } else {      String tokenRedisRetStr = stringRedisTemplate.opsForValue().get(Constant.REDIS_TOKEN_KEY_PREFIX + token);      if (tokenRedisRetStr == null) {        return tokenError(response, "token失效");      } else {        JSONObject tokenRedisRet = JSON.parseObject(tokenRedisRetStr);        // 接口权限校验        List<String> sysPermissionPathList = JSON.parseObject(stringRedisTemplate.opsForValue().get(Constant.REDIS_SYS_PERMISSION_KEY), List.class);        JSONArray userSysPermissionPathList = tokenRedisRet.getJSONArray("sysPermissionPathList");        String path = request.getServletPath();        if (sysPermissionPathList.contains(path) && !userSysPermissionPathList.contains(path)) {          return permissionError(response);        }        // username 存入上下文        ServletContextUtils.setUsername(tokenRedisRet.getString("username"));        // 更新token失效时间        stringRedisTemplate.expire(Constant.REDIS_TOKEN_KEY_PREFIX + token, Constant.REDIS_TOKEN_EXPIRE, TimeUnit.HOURS);        return true;      }    }  }  private boolean error(HttpServletResponse response, Result result) throws IOException {    response.setHeader("Content-Type", "application/json;charset=UTF-8");    response.getWriter().print(JSON.toJSONString(result));        return false;  }  private boolean tokenError(HttpServletResponse response,  String errMsg) throws IOException {    return error(response, Result.fail(ResultCode.BAD_TOKEN, errMsg));  }  private boolean permissionError(HttpServletResponse response) throws IOException {    return error(response, Result.fail(ResultCode.NO_PERMISSION));  }}